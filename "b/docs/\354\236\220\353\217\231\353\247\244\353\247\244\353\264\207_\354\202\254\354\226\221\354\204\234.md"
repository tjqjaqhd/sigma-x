# DB 기반 자동매매봇 사양서

## 목표
- 시뮬레이터, 데시보드, 백테스트, 알림 기능을 포함한 자동매매 시스템 구축
- 개인용이지만 확장 가능한 구조로 설계

## 서버 환경
- 플랫폼: Naver Cloud Platform (VPC)
- 서버 사양: s4-g3 (vCPU 4개 / 메모리 16GB)
- 스토리지: 100GB SSD (`/dev/vda`)
- 운영체제: Ubuntu 24.04 LTS

## 시스템 구성
1. **데이터 수집 모듈**
   - 외부 거래소 API를 통해 시세 데이터를 주기적으로 수집
   - `pandas`와 `requests`를 활용하여 데이터 가공
   - 수집된 데이터는 PostgreSQL 데이터베이스에 저장
2. **전략 모듈**
   - TA-Lib(`ta` 라이브러리)을 사용한 기술적 지표 계산
   - 사용자가 설정한 조건에 따라 매수/매도 신호 생성
   - 여러 전략을 등록하고 선택적으로 실행 가능하도록 설계
3. **트레이딩 엔진**
   - 신호에 따라 주문을 실행하는 핵심 로직
   - 실제 주문 실행 대신 시뮬레이션 모드 지원
   - 주문 내역과 결과를 데이터베이스에 기록
4. **백테스트 모듈**
   - 과거 데이터를 이용하여 전략 성과를 검증
   - 결과를 시각화하여 전략의 안정성과 수익률 평가
5. **스케줄러**
   - `apscheduler` 라이브러리로 데이터 수집, 전략 실행, 알림 등을 주기적으로 수행
6. **알림 시스템**
   - `slack_sdk`를 이용해 Slack으로 주요 이벤트(매매 체결, 오류 등) 알림
7. **데시보드**
   - `fastapi`와 `uvicorn`을 이용한 웹 대시보드 제공
   - 수익률, 보유 자산, 최근 거래 내역 등을 시각화

## 데이터베이스 설계
- `sqlalchemy`와 `alembic`을 사용한 ORM 및 마이그레이션 관리
- 주요 테이블
  - `prices`: 시세 데이터 저장
  - `orders`: 매수/매도 주문 기록
  - `trades`: 체결된 거래 내역
  - `strategies`: 전략 설정 정보

## 개발 및 배포
- 가상환경에 `requirements.txt`의 패키지 설치
- Git을 이용한 형상 관리, PR 워크플로 활용
- 서버에서 `systemd` 혹은 `pm2`로 봇 서비스 실행 관리 고려


## 디렉터리 구조
- `sigma/data` : 시세 데이터를 수집하는 모듈
- `sigma/strategies` : 매매 전략 구현 모음
- `sigma/engine` : 트레이딩 봇 핵심 로직
- `sigma/backtest` : 과거 데이터를 이용한 백테스트 기능
- `sigma/dashboard` : FastAPI 기반 웹 대시보드
- `sigma/scheduler.py` : 스케줄러 설정 및 실행 진입점

위 구조를 중심으로 모든 기능을 5단계로 나누어 관리합니다.

## 동작 흐름
1. **데이터 수집**: `DataCollector`가 외부 API에서 시세를 받아 DB에 저장합니다.
2. **전략 평가**: `TradingBot`이 DB의 최근 데이터를 불러와 전략을 통해 신호를 생성합니다.
3. **주문 실행**: 생성된 신호는 시뮬레이션 형태로 실행되며 알림이 전송됩니다.
4. **백테스트**: `run_backtest` 함수를 통해 전략 성능을 검증할 수 있습니다.
5. **대시보드 및 모니터링**: FastAPI 앱에서 결과를 조회하고, Slack 알림으로 주요 이벤트를 확인합니다.
