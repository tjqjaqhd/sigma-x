```mermaid
classDiagram
    class DataCollector {
        +run(limit)
    }
    class TradeExecutor {
        +run(limit)
    }
    class StrategyManager {
        +change_strategy(name)
    }
    class MovingAverageStrategy {
        +process(price)
    }
    class RiskManager {
        +check(signal)
        +apply(signal)
    }
    class OrderExecutor {
        +execute(signal, price)
    }
    class SimulatorExecutor {
        +execute(signal, price)
    }
    class APIServer {
        +app FastAPI
        +run()
    }
    class Redis {
    }
    class RabbitMQ {
    }

    DataCollector --> RabbitMQ : publish
    TradeExecutor --> RabbitMQ : consume
    TradeExecutor --> StrategyManager : use
    StrategyManager --> MovingAverageStrategy : manage
    TradeExecutor --> RiskManager : use
    TradeExecutor --> OrderExecutor : use
    OrderExecutor --> SimulatorExecutor : delegate
    OrderExecutor --> Redis : write
    APIServer --> Redis : read/write
```
